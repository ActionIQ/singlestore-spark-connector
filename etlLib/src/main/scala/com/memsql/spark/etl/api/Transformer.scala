package com.memsql.spark.etl.api

import org.apache.spark.sql.{SQLContext, DataFrame}
import org.apache.spark.rdd.RDD
import com.memsql.spark.etl.utils.{ByteUtils, PhaseLogger}

/**
 * Pipeline Transformer interface.
 *
 * @tparam S type parameter of the incoming [[org.apache.spark.rdd.RDD]].
 */
abstract class Transformer[S] extends Serializable {
  /**
   * Initialization code for this Extractor
   *
   * @param sqlContext The SQLContext that is used to run this pipeline.
   *                   NOTE: If the pipeline is running in MemSQL Streamliner, this is an instance of
   *                   [[com.memsql.spark.context.MemSQLContext]], which has additional metadata about the MemSQL cluster.
   * @param config The Transformer configuration passed from MemSQL Ops.
   * @param logger A logger instance that is integrated with MemSQL Ops.
   */
  def initialize(sqlContext: SQLContext, config: PhaseConfig, logger: PhaseLogger): Unit = {}

  /**
   * Transforms the incoming [[org.apache.spark.rdd.RDD]] into a [[org.apache.spark.sql.DataFrame]].
   *
   * @param sqlContext The SQLContext that is used to run this pipeline.
   *                   NOTE: If the pipeline is running in MemSQL Streamliner, this is an instance of
   *                   [[com.memsql.spark.context.MemSQLContext]], which has additional metadata about the MemSQL cluster.
   * @param rdd The [[org.apache.spark.rdd.RDD]] generated by the Extractor for this batch.
   * @param config The Transformer configuration passed from MemSQL Ops.
   * @param logger A logger instance that is integrated with MemSQL Ops.
   * @return A [[org.apache.spark.sql.DataFrame]] with the transformed data to be loaded.
   */
  def transform(sqlContext: SQLContext, rdd: RDD[S], config: PhaseConfig, logger: PhaseLogger): DataFrame
}

/**
 * Pipeline Transformer interface for byte arrays.
 *
 * Currently this is the only supported subclass of Transformer in MemSQL Streamliner.
 */
abstract class ByteArrayTransformer extends Transformer[Array[Byte]] {
  final var byteUtils = ByteUtils
}

/**
 * Convenience wrapper around ByteArrayExtractor for initialization and transformation of extracted [[org.apache.spark.rdd.RDD]]s.
 */
abstract class SimpleByteArrayTransformer extends ByteArrayTransformer {
  final override def initialize(sqlContext: SQLContext, config: PhaseConfig, logger: PhaseLogger): Unit = {
    val userConfig = config.asInstanceOf[UserTransformConfig]
    initialize(sqlContext, userConfig, logger)
  }

  /**
   * Initialization code for your Transformer.
   * This is called after instantiation of your Transformer and before [[Transformer.transform]].
   * The default implementation does nothing.
   *
   * @param sqlContext The SQLContext that is used to run this pipeline.
   *                   NOTE: If the pipeline is running in MemSQL Streamliner, this is an instance of
   *                   [[com.memsql.spark.context.MemSQLContext]], which has additional metadata about the MemSQL cluster.
   * @param config The user defined configuration passed from MemSQL Ops.
   * @param logger A logger instance that is integrated with MemSQL Ops.
   */
  def initialize(sqlContext: SQLContext, config: UserTransformConfig, logger: PhaseLogger): Unit = {}

  final override def transform(sqlContext: SQLContext, rdd: RDD[Array[Byte]], config: PhaseConfig, logger: PhaseLogger): DataFrame = {
    val userConfig = config.asInstanceOf[UserTransformConfig]
    transform(sqlContext, rdd, userConfig, logger)
  }

  /**
   * Convenience method for transforming [[org.apache.spark.rdd.RDD]]s into [[org.apache.spark.sql.DataFrame]]>
   * This is called once per batch on the [[org.apache.spark.rdd.RDD]] generated by the Extractor and the result
   * is passed to the Loader.
   *
   * @param sqlContext The SQLContext that is used to run this pipeline.
   *                   NOTE: If the pipeline is running in MemSQL Streamliner, this is an instance of
   *                   [[com.memsql.spark.context.MemSQLContext]], which has additional metadata about the MemSQL cluster.
   * @param rdd The [[org.apache.spark.rdd.RDD]] for this batch generated by the Extractor.
   * @param config The user defined configuration passed from MemSQL Ops.
   * @param logger A logger instance that is integrated with MemSQL Ops.
   * @return A [[org.apache.spark.sql.DataFrame]] with the transformed data to be loaded.
   */
  def transform(sqlContext: SQLContext, rdd: RDD[Array[Byte]], config: UserTransformConfig, logger: PhaseLogger): DataFrame
}
